#!/bin/bash
#
# Reactor start/stop/status init.d script

#Location of JAVA_HOME (bin files)
export JAVA_HOME=/usr/java/latest
 
#Add Java binary files to PATH
export PATH=$JAVA_HOME/bin:$PATH
 
#REACTOR_HOME is the location of the Reactor instance
export REACTOR_HOME=/opt/reactor
 
#REACTOR_USER is the default user of Reactor
export REACTOR_USER=reactor
 
#SERVER_USAGE is the message if this script is called without any options
SERVER_USAGE="Usage: $0 {\e[00;32mstart\e[00m|\e[00;31mstop\e[00m|\e[00;31mkill\e[00m|\e[00;32mstatus\e[00m|\e[00;31mrestart\e[00m}"
 
#SHUTDOWN_WAIT is wait time in seconds for java proccess to stop
SHUTDOWN_WAIT=20
 
server_pid() {
        echo `ps -fe | grep $REACTOR_HOME | grep app.pid | grep -v grep | tr -s " "|cut -d" " -f2`
}
 
start() {
  pid=$(server_pid)
  if [ -n "$pid" ]
  then
    echo -e "\e[00;31mReactor is already running (pid: $pid)\e[00m"
  else
    # Start server
    echo -e "\e[00;32mStarting Reactor\e[00m"
    #ulimit -n 100000
    #umask 007
    #/bin/su -p -s /bin/sh $REACTOR_USER
        if [ `user_exists $REACTOR_USER` = "1" ]
        then
                /bin/su $REACTOR_USER -c $REACTOR_HOME/bin/run-transports
        else
                sh $REACTOR_HOME/bin/run-transports
        fi
        status
  fi
  return 0
}
 
status(){
          pid=$(server_pid)
          if [ -n "$pid" ]; then echo -e "\e[00;32mReactor is running with pid: $pid\e[00m"
          else echo -e "\e[00;31mReactor is not running\e[00m"
          fi
}

terminate() {
	echo -e "\e[00;31mTerminating Reactor\e[00m"
	kill -9 $(server_pid)
}

ask_to_stop() {
  echo -e "\e[00;31mSending stop signal to Reactor\e[00m"
	kill -15 $(server_pid)
}

stop() {
  pid=$(server_pid)
  if [ -n "$pid" ]
  then
    echo -e "\e[00;31mStoping Reactor\e[00m"
    #/bin/su -p -s /bin/sh $REACTOR_USER
        ask_to_stop
 
    let kwait=$SHUTDOWN_WAIT
    count=0;
    until [ `ps -p $pid | grep -c $pid` = '0' ] || [ $count -gt $kwait ]
    do
      echo -n -e "\n\e[00;31mwaiting for processes to exit\e[00m";
      sleep 1
      let count=$count+1;
    done
 
    if [ $count -gt $kwait ]; then
      echo -n -e "\n\e[00;31mkilling processes didn't stop after $SHUTDOWN_WAIT seconds\e[00m"
      terminate
    fi
  else
    echo -e "\e[00;31mReactor is not running\e[00m"
  fi
 
  return 0
}
 
user_exists(){
        if id -u $1 >/dev/null 2>&1; then
        echo "1"
        else
                echo "0"
        fi
}
 
case $1 in
	start)
	  start
	;;
	stop)  
	  stop
	;;
	restart)
	  stop
	  start
	;;
	status)
		status
	;;
	kill)
		terminate
	;;		
	*)
		echo -e $SERVER_USAGE
	;;
esac    
exit 0
